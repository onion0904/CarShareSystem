// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package sqlc

import (
	"context"
	"time"
)

const deleteEventByID = `-- name: DeleteEventByID :exec
DELETE FROM events WHERE id = ?
`

func (q *Queries) DeleteEventByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEventByID, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, users_id, together, description, date, important, created_at, updated_at FROM events WHERE id = ?
`

func (q *Queries) GetEventByID(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.Together,
		&i.Description,
		&i.Date,
		&i.Important,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertEvent = `-- name: InsertEvent :exec
INSERT INTO events (id, users_id, together, description, date, important) 
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertEventParams struct {
	ID          string
	UsersID     string
	Together    bool
	Description string
	Date        time.Time
	Important   bool
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) error {
	_, err := q.db.ExecContext(ctx, insertEvent,
		arg.ID,
		arg.UsersID,
		arg.Together,
		arg.Description,
		arg.Date,
		arg.Important,
	)
	return err
}
