package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/onion0904/app/presentation/graphql/graph/model"
	domain_user "github.com/onion0904/app/domain/user"
	domain_group "github.com/onion0904/app/domain/group"
	domain_event "github.com/onion0904/app/domain/event"

	usecase_user "github.com/onion0904/app/usecase/user"
	usecase_group "github.com/onion0904/app/usecase/group"
	usecase_event "github.com/onion0904/app/usecase/event"

	repo_user "github.com/onion0904/app/infrastructure/repository"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	userRepo := repo_user.NewUserRepository()
	user := usecase_user.NewSaveUserUseCase(userRepo)

	DTO := usecase_user.SaveUseCaseDto{
		LastName:    input.LastName,
        FirstName:   input.FirstName,
        Email:       input.Email,
        Password:    input.Password,
        Icon:        *input.Icon,
	}

	err := user.Run(ctx,DTO)
	if err != nil {
		return nil, err
	}
	return nil,nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input model.CreateGroupInput) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, input model.UpdateGroupInput) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: UpdateGroup - updateGroup"))
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
}

// AddUserToGroup is the resolver for the addUserToGroup field.
func (r *mutationResolver) AddUserToGroup(ctx context.Context, groupID string, userID string) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: AddUserToGroup - addUserToGroup"))
}

// RemoveUserFromGroup is the resolver for the removeUserFromGroup field.
func (r *mutationResolver) RemoveUserFromGroup(ctx context.Context, groupID string, userID string) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromGroup - removeUserFromGroup"))
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.CreateEventInput) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - createEvent"))
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id string, input model.UpdateEventInput) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - updateEvent"))
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEvent - deleteEvent"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*model.Group, error) {
	panic(fmt.Errorf("not implemented: Group - group"))
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*model.Group, error) {
	panic(fmt.Errorf("not implemented: Groups - groups"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// EventsByUser is the resolver for the eventsByUser field.
func (r *queryResolver) EventsByUser(ctx context.Context, userID string) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: EventsByUser - eventsByUser"))
}

// EventsByGroup is the resolver for the eventsByGroup field.
func (r *queryResolver) EventsByGroup(ctx context.Context, groupID string) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: EventsByGroup - eventsByGroup"))
}

// EventsByMonth is the resolver for the eventsByMonth field.
func (r *queryResolver) EventsByMonth(ctx context.Context, input model.MonthlyEvent) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: EventsByMonth - eventsByMonth"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
